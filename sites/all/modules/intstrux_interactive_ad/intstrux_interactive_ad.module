<?php

define('NODE_DIRECTORY', 'public://interactive_ads_node');

function intstrux_interactive_ad_form_page_interactive_ad_alt_node_form_alter(&$form, &$form_state, $form_id) {
  drupal_add_js(drupal_get_path('module', 'intstrux_interactive_ad') . '/js/intstrux_interactive_ad.js');  
  
  // edit mode only
  if(isset($form['#node']->nid)) {
    // allow users to save node multiple times
    $form['changed']['#default_value'] = time() + 600;
    
    
    $form['active_ad_download_js_container'] = array(
      '#type' => 'container',
      '#weight' => $form['field_active_ad_video_customize']['#weight'] + 2,
    );
    
    $form['active_ad_download_js_container']['download_js_button'] = array(
      '#type' => 'submit',
      '#value' => 'Generate JS file',  
        '#ajax' => array(
        'callback' => 'intstrux_interactive_ad_download_js_callback',
        //'wrapper' => 'download-js-file',
        //'effect' => 'fade',
      ),
      '#limit_validation_errors' => $form['actions']['save']['#limit_validation_errors'],
      '#submit' => array('intstrux_interactive_ad_download_js_submit', 'node_form_submit'),
      '#weight' => 1,
    );
    
    $form['active_ad_download_js_container']['download_js_fieldset'] = array(
      '#type' => 'fieldset',    
      '#title' => t("Generated JS file"),
      '#description' => t('This is where you get generated JS file.'),
      '#weight' => 2,
    );
    
    $form['active_ad_download_js_container']['download_js_fieldset']['download_status_message'] = array(
      '#type' => 'markup',    
      '#prefix' => '<div id="download-status-message">',
      '#suffix' => '</div>',
    );
      
    $form['active_ad_download_js_container']['download_js_fieldset']['download_js_link'] = array(
      '#type' => 'markup',    
      '#prefix' => '<div id="download-js-file">',
      '#suffix' => '</div>',
      '#markup' => (isset($form['#node']->field_active_ad_js_url['und']))? l($form['#node']->field_active_ad_js_url['und'][0]['value'], $form['#node']->field_active_ad_js_url['und'][0]['value'], array('attributes' => array('target' => '_blank'))) : '',
    );
  }
  
  $form['#after_build'][] = 'intstrux_interactive_ad_form_page_interactive_ad_alt_after_build';
}

function intstrux_interactive_ad_form_page_interactive_ad_alt_after_build($form, &$form_state) {
  
  $form['field_active_ad_js_url']['und'][0]['value']['#attributes']['readonly'] = array('readonly');

  return $form;
}

function intstrux_interactive_ad_download_js_callback(&$form, &$form_state) {
  // generate javascript URL
  $output = '';
    
  drupal_set_message('JS file has been generated successfully.', 'status');
  
  $js_variables = '';
  
  $videos = $form_state['values']['field_active_ad_video_customize']['und'];
  
  foreach($videos as $delta => $video) {
    if(is_array($video)) {
      $video_url = file_create_url($video['field_active_ad_video_source']['und'][0]['value']);
      $js_variables .= t('var video@index = "!video";', array('@index' => $delta + 1, '!video' => $video_url)) . "\n";    
    }
  }
  
  // directory name; where all generated js files will be stored
  $js_directory = 'public://interactive_ads_js';
  
  // create directory if it doesn't exist
  if (!is_dir($js_directory) && !drupal_mkdir($js_directory, NULL, TRUE)) {
    drupal_set_message(t('The directory %directory does not exist and could not be created.', array('%directory' => $js_directory)));
  }
  
  // check if the folder is writable 
  if (is_dir($js_directory) && !is_writable($js_directory) && !drupal_chmod($js_directory)) {
    drupal_set_message(t('The directory %directory exists but is not writable and could not be made writable.', array('%directory' => $js_directory)));
  } elseif (is_dir($js_directory)) {
    
    // create a special htaccess, which will force generated js files to be downloadable 
    intstrux_interactive_ad_file_create_htaccess($js_directory);
    
    // create js file with a special name
    //$js_uri = file_create_filename(md5($js_variables) . '.js', $js_directory);
    //create a lookup file which has a pattern we can identify instead
   
    $lookup_id = isset($form['#node']->nid) ? $form['#node']->nid : time();

    $js_uri = file_create_filename('lookup_'. $lookup_id. '.js', $js_directory);
    
    // store js variables
    file_put_contents($js_uri, $js_variables);
    
    // get js URL
    $js_link = file_create_url($js_uri);
    
    // linkable js URL
    $output = l($js_link, $js_link, array('attributes' => array('target' => '_blank')));
            
    $commands = array();
    $messages = theme_status_messages(array('display' => 'status'));
    
    $commands[] = ajax_command_html('#download-status-message', $messages);
    $commands[] = ajax_command_html("#download-js-file", $output);
    $commands[] = ajax_command_invoke('#edit-field-active-ad-js-url-und-0-value', 'val', array($js_link));
    
    return array('#type' => 'ajax', '#commands' => $commands);
    
    //$form['active_ad_download_js_container']['download_js_fieldset']['download_js_link']['#markup'] = $output;
    //return $form['active_ad_download_js_container']['download_js_fieldset']['download_js_link']; 
  }
  
  return;
}

function intstrux_interactive_ad_download_js_submit($form, &$form_state) {
  // do nothing so far.
}

/**
 * Implements hook_field_extra_fields().
 */
function intstrux_interactive_ad_field_extra_fields() {
  $extra = array();
  
  $extra['node']['page_interactive_ad_alt']['form'] = array(
    'additional_settings' => array(
      'label' => t('Additional Information'),
      'description' => t('Node module element'),
      'weight' => 100,
    ),
    'active_ad_download_js_container' => array(
      'label' => t('Download JS button'),
      'description' => t('Interactive Ad module element'),
      'weight' => 99,
    ),
  );
  
  return $extra;
}

function intstrux_interactive_ad_source_videos() {
  //if(arg(0) == 'node' && is_numeric(arg(1)) && arg(2) == 'edit'){
  if(arg(0) == 'node' && is_numeric(arg(1))){
    $_SESSION['interactive_ad_nid'] = arg(1);
  }  

  $options = array(
    'public://video_a.mp4' => 'Video A',
    'public://video_b.mp4' => 'Video B',
    'public://video_c.mp4' => 'Video C',
  );
    
  if(isset($_SESSION['interactive_ad_nid'])){
    $node = node_load($_SESSION['interactive_ad_nid']);
    if(isset($node->field_active_ad_video_ads['und'])) {
      $videos = $node->field_active_ad_video_ads['und'];
      foreach($videos as $delta => $video) {
        $options[$video['uri']] = $video['filename'];
      }
    }
    //unset($_SESSION['interactive_nid']);
  }
  
  return $options;
}


/**
 * Creates a .htaccess file in the given directory.
 * Clone of file_create_htaccess.
 * 
 * @param $directory
 *   The directory.
 */
function intstrux_interactive_ad_file_create_htaccess($directory) {
  if (file_uri_scheme($directory)) {
    $directory = file_stream_wrapper_uri_normalize($directory);
  }
  else {
    $directory = rtrim($directory, '/\\');
  }
  $htaccess_path = $directory . '/.htaccess';

  if (file_exists($htaccess_path)) {
    // Short circuit if the .htaccess file already exists.
    return;
  }

  // Public .htaccess file.
  $htaccess_lines = "SetHandler Drupal_Security_Do_Not_Remove_See_SA_2006_006\nOptions None\nOptions +FollowSymLinks\nAddType application/octet-stream .js";

  // Write the .htaccess file.
  if (file_put_contents($htaccess_path, $htaccess_lines)) {
    drupal_chmod($htaccess_path, 0444);
  }
  else {
    $variables = array(
      '%directory' => $directory,
      '!htaccess' => '<br />' . nl2br(check_plain($htaccess_lines)),
    );
    watchdog('security', "Security warning: Couldn't write .htaccess file. Please create a .htaccess file in your %directory directory which contains the following lines: <code>!htaccess</code>", $variables, WATCHDOG_ERROR);
  }
}

/**
 * Implements hook_node_presave().
 */
function intstrux_interactive_ad_node_presave($node) {
  intstrux_interactive_ad_extract_zip($node);
}

 /**
 * Implements hook_node_insert().
 */
function intstrux_interactive_ad_node_insert($node) {
  //intstrux_interactive_ad_extract_zip($node);  
}

 /**
 * Implements hook_node_insert().
 */
function intstrux_interactive_ad_node_delete($node) {
  if($node->type == 'interactive_ad_alt') {
    $nid_directory = NODE_DIRECTORY . '/' . $node->nid;
    file_unmanaged_delete_recursive($nid_directory);
  }
}

/**
 * Save extracted zip file files to db
 * 
 * @param $node
 *    current node object
 */
function intstrux_interactive_ad_extract_zip(&$node) {
  if($node->type == 'page_interactive_ad_alt') {
      
    if(isset($node->field_active_ad_html_package['und']) && $node->field_active_ad_html_package['und'] && isset($node->nid)) {

      // create node directory
      //$node_directory = 'public://interactive_ads_node';
      
      // create nid directory inside node directory
      $nid_directory = NODE_DIRECTORY . '/' . $node->nid;
      
      $fid = $node->field_active_ad_html_package['und'][0]['fid'];
      
      // load file info
      if($file = file_load($fid)) {
          
        $nfiles_total_size = 0;  
        
        if($file->uri) { 
          
          if(!isset($node->original) && isset($node->nid)) {
            // insert mode
            
            // extract zip file  
            $nfiles = intstrux_interactive_ad_save_extracted_files($file, $nid_directory);

            // prepare entity object
            $entity = new stdClass();
            $entity->nid = $node->nid;
            $entity->vid = $node->vid;
            $entity->type  = $node->type;
            $entity->original = NULL;  
              
            // store fid to embedded field          
            foreach($nfiles as $delta => $nfile) {
              $entity->field_active_ad_embedded_files['und'][$delta] = array(
                'fid' => $nfile->fid,
                'display' => 1,
                'description' => '',
              );
              // calculate the size of each file
              $nfiles_total_size += $nfile->filesize;
            }
            
            // store the summation of all files after extraction
            $entity->field_active_ad_files_size['und'][0]['value'] = $nfiles_total_size;
            field_attach_presave('node', $entity);
            field_attach_update('node', $entity);  
              
          } else {
            // updated mode
              
            // check if user uploaded a new zip file
            $new_fid = (isset($node->field_active_ad_html_package['und'][0]))? $node->field_active_ad_html_package['und'][0]['fid'] : 0;
            $original_fid = (isset($node->original->field_active_ad_html_package['und'][0]))? $node->original->field_active_ad_html_package['und'][0]['fid'] : 0;
            
            if($new_fid != $original_fid) {
              
              // extract zip file  
              $nfiles = intstrux_interactive_ad_save_extracted_files($file, $nid_directory);  
               
              // load original file object
              if($ofile = file_load($original_fid)) {
                // delete original file from db
                file_delete($ofile, true);
              }
                
              // remove embedded files
              if(isset($node->field_active_ad_embedded_files['und']) && $node->field_active_ad_embedded_files['und']) {
                $embeddeds = $node->field_active_ad_embedded_files['und'];
                foreach($embeddeds as $delta => $embedded) {
                  // get file object
                  $ofile = file_load($node->field_active_ad_embedded_files['und'][$delta]['fid']);  
                  
                  // remove the file from node 
                  unset($node->field_active_ad_embedded_files['und'][$delta]);
                  
                  if($ofile) {
                    // delete file from db
                    //file_usage_delete($ofile, 'file', NULL, NULL, 0);
                    file_delete($ofile, true);
                  }
                }
              }
              
              // store the new fid to embedded field          
              foreach($nfiles as $delta => $nfile) { 
                $node->field_active_ad_embedded_files['und'][] = array(
                  'fid' => $nfile->fid,
                  'display' => 1,
                  'description' => '',
                );
                // calculate the size of each file
                $nfiles_total_size += $nfile->filesize;
              }
              
              $node->field_active_ad_files_size['und'][0]['value'] = $nfiles_total_size;
            }
          }
        }
      }
    }  else {
        
      // remove zip file from db if exist
      $original_fid = (isset($node->original->field_active_ad_html_package['und'][0]))? $node->original->field_active_ad_html_package['und'][0]['fid'] : 0;
      
      // load original file object
      if($ofile = file_load($original_fid)) {
        // delete original file from db
        file_delete($ofile, true);
      }

      // remove embedded files if zip file has been removed
      if(isset($node->field_active_ad_embedded_files['und']) && $node->field_active_ad_embedded_files['und']) {
        $embeddeds = $node->field_active_ad_embedded_files['und'];
        foreach($embeddeds as $delta => $embedded) {
          // get file object
          $ofile = file_load($node->field_active_ad_embedded_files['und'][$delta]['fid']); 
          // might need to delete the file using file_delete function
          unset($node->field_active_ad_embedded_files['und'][$delta]);
          
          if($ofile) {
            // delete file from db
            file_delete($ofile, true);
          }
        }
      }
      
      // set files size to 0
      $node->field_active_ad_files_size['und'][0]['value'] = 0;
    }
  }
}

/**
 * Save extracted zip file files to db
 * 
 * @param $zip_file
 *    A file object returned by file_load()
 * 
 * @param $directory
 *   The directory path to store file.
 * 
  * @return array
 *   Array of extracted files
 */
function intstrux_interactive_ad_save_extracted_files($zip_file, $directory) {
  global $user; 
  
  // delete existing directories and files if exists
  file_unmanaged_delete_recursive($directory);  
            
  // get zipped file
  $archiver = archiver_get_archiver($zip_file->uri);
  
  // get list of files 
  $files = $archiver->listContents();
          
  // extract zip file indside nid directory
  $archiver->extract($directory);
          
  $ndirectory = array();
  
  $nfiles = array();
  
  $extracted_time = time();
          
  foreach ($files as $delta => $uri) {
      
    $nfile_uri =  $directory . '/' . $uri;
    
    // check if $nfile_uri a directory
    if(is_dir($nfile_uri)) {
      $ndirectory[] = $nfile_uri;
    }
    
    $destination = $directory . '/' . drupal_basename($nfile_uri);
    
    // move file if it in a folder
    if($nfile_uri != $destination) {
      $nfile_uri = file_unmanaged_move($nfile_uri, $destination);
    }
    
    /*
    $ofile_uri = $nfile_uri;
    
    $nfile_uri_info = pathinfo($ofile_uri);
    
    if(isset($nfile_uri_info['filename']) && isset($nfile_uri_info['extension'])) {
      $nfile_uri = $nfile_uri_info['dirname'] . '/' . $nfile_uri_info['filename'] . '_' . $extracted_time . '.' . $nfile_uri_info['extension'];  
      
      // attach timestamp to file suffix
      rename($ofile_uri, $nfile_uri);
    }
    */
    
    // check if uri is an actual file not directory
    if(is_file($nfile_uri)) {
      $nfile = new stdClass();
      $nfile->fid = NULL;
      $nfile->uri = $nfile_uri;
      $nfile->filename = drupal_basename($nfile->uri);
      $nfile->filemime = file_get_mimetype($nfile->uri);              
      $nfile->uid = $user->uid;
      $nfile->status = FILE_STATUS_PERMANENT;
      
      // check if filename is not hidden file i.e .DS_Store in macos
      if(substr($nfile->filename, 0, 1) != '.') {
        $replaced = FALSE;  
        // check if file already exist  
        $existing_files = file_load_multiple(array(), array('uri' => $nfile->uri));
        if (count($existing_files)) {
          $existing = reset($existing_files);
          //$nfile->fid = $existing->fid;
          // delete existing files in db
          db_delete('file_managed')->condition('fid', $existing->fid)->execute();
          db_delete('file_usage')->condition('fid', $existing->fid)->execute();
        }

        // save file to db
        if($nfile = file_save($nfile)) {
          $nfiles[] = $nfile;
        }
      }
    }  
  }
  
  // reorder $ndirectory
  $ndirectory = array_reverse($ndirectory);
  
  // remove all directories
  foreach($ndirectory as $delta => $uri) {
    drupal_rmdir($uri);
  }
  
  return $nfiles;
}