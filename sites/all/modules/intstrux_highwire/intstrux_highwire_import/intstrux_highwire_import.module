<?php

/**
 * @file
 * Defines intstrux highwire import functions.
 */


/**
 * Implements hook_cron().
 */
function intstrux_highwire_import_cron() {
  
  // 86400 = 24 hours
  // 10800 = 3 hours
  
  if (variable_get('highwire_last_cron', 0) < time() - 86400) {
    variable_set('highwire_last_cron', time());
    _intstrux_highwire_import_new_articles();
  }  
}


function _intstrux_highwire_import_new_articles() {
  $finished = false;
  $progress = 0;
  $current_page = 0;
  
  $query = "SELECT entity_id, STR_TO_DATE(field_article_published_date_value, '%Y-%m-%d') as published_data FROM field_data_field_article_published_date WHERE bundle = 'article' ORDER BY published_data DESC, entity_id DESC LIMIT 1";

  $last_published = db_query($query)->fetchField(1);
  
  if($last_published) {
    
    $last_published = date('Y-m-01', strtotime($last_published));
    
    watchdog('intstrux_highwire_import', 'Date: @date', array('@date' => $last_published), WATCHDOG_INFO);
    drush_print('Date: '.$last_published);
    
    while(!$finished) {
      
      usleep(3999999);
      
      $count = 1;
      $start = ($current_page * $count) + 1;
      
      if($result = intstrux_highwire_search_by_date($last_published, $start, $count)) {
        $totalResults = $result['opensearch:totalResults']['$'];
        
        $current_page++;
        $progress++;
        
        watchdog('intstrux_highwire_import', 'Page: @current_page', array('@current_page' => $current_page));
        drush_print('Page: '.$current_page." of ".$totalResults);
   

        // if there's only one item, create key 0
        if(!isset($result['atom:entry'][0])) {
          $atom_entry = $result['atom:entry'];
          unset($result['atom:entry']);
          $result['atom:entry'] = array(
            '0' => $atom_entry,
          );
        }
        
        foreach($result['atom:entry'] as $entry) {
          
          $html = intstrux_highwire_article_content_load_by_entry($entry, 'full');
          
          $type = ($html)? 'article' : 'article_express';
          
          if($atom_id = intstrux_highwire_atom_load(intstrux_highwire_parse_id($entry), $type)) {
                        
            // do nothing 
            watchdog('intstrux_highwire_import', 'Found atom id: @id | Type: @type', array('@id' => $atom_id, '@type' => $type));

          } else {
            
            $title = intstrux_highwire_parse_title($entry); 
            
            // create new node
            $node = new stdClass();
            $node->type = $type;
            node_object_prepare($node);
            
            // set node author 
            if(!isset($node->nid)) {
              $node->uid = 1;
            }
            
            $node->title = truncate_utf8($title, 255, TRUE);
            $node->language = LANGUAGE_NONE;
            
            // set title
            if($title) {
              $node->field_article_title[$node->language][0]['value'] = $node->title;
            }
            
            // set article doi
            if($article_id = intstrux_highwire_parse_doi($entry)) {
              $node->field_article_id[$node->language][0]['doi'] = $article_id;
            }
            
            // set article page
            if($page = intstrux_highwire_parse_page($entry)) {
              $node->field_article_page[$node->language][0]['value'] = $page;
            } else {
              // default page value
              $node->field_article_page[$node->language][0]['value'] = 1000;
            }

            // set article month
            if($month = intstrux_highwire_parse_month($entry)) {
              $node->field_article_month[$node->language][0]['value'] = $month;
            }
            
            // set article year
            if($year = intstrux_highwire_parse_year($entry)) {
              // taxonomy
              if($tid = _intstrux_highwire_taxonomy($year, 'years')) {
                $node->field_article_year[$node->language][0]['tid'] = $tid;
              }                
            }
            
            // set article volume id
            if($volume_id = intstrux_highwire_parse_volume_id($entry)) {
              // taxonomy
              if($tid = _intstrux_highwire_taxonomy($volume_id, 'volumes')) {
                $node->field_article_volume[$node->language][0]['tid'] = $tid;  
              }       
            }            
 
            // set article issue id
            if($issue_id = intstrux_highwire_parse_issue_id($entry)) {
              // taxonomy
              if($tid = _intstrux_highwire_taxonomy($issue_id, 'issues')) {
                $node->field_article_issue[$node->language][0]['tid'] = $tid; 
              }

              $tax_tid = 0;

              if(is_numeric($issue_id)) {  
                if($tid = _intstrux_highwire_taxonomy('Journal', 'article_types')) {
                  $tax_tid = $tid; 
                }
              } elseif( strpos($issue_id, 'suppl') !== FALSE ) {
                if($tid = _intstrux_highwire_taxonomy('Supplement', 'article_types')) {
                  $tax_tid = $tid; 
                }
              } else {
                if($tid = _intstrux_highwire_taxonomy('Other', 'article_types')) {
                  $tax_tid = $tid;
                }
              }

              if($tax_tid) {
                $node->field_article_type[$node->language][0]['tid'] = $tax_tid;  
              }
            }
            
            // set article category or section or subject
            if($section = intstrux_highwire_parse_categories($entry)) {
              
              // HighWire terms need to be replaced with onchd terms
              $replace_with = array(
                'Academiaâ€“Pharma Intersect' => 'Academia-Pharma Intersect',
                'Cancer Diagnostics' => 'Cancer Diagnostics and Molecular Pathology',
                'COMMENTARY' => 'Commentaries',
                'COMMENTARY: BREAST CANCER' => 'Commentaries',
                'COMMENTARY: LUNG CANCER' => 'Commentaries',
                'EDITORIALS' => 'Editorial',
                'EDITORIAL: LUNG CANCER' => 'Editorial',
                'EDITORIAL: BREAST CANCER' => 'Editorial',
                'Genitourinary Cancer' => 'Genitourinary Cancer: Prostate',
                'Head and Neck Cancer' => 'Head and Neck Cancers',
                'Lymphomas' => 'Lymphoma',
                'Lymphoma Series: Variants of Large-Cell Lymphoma' => 'Lymphoma',
                'Medical Ethics: Schwartz Center Rounds' => 'Medical Ethics',
                'Outcomes Research: Case Reports' => 'Outcomes Research',
                'Reflection' => 'Reflections',
                'REFLECTIONS: ON SEPTEMBER 11, 2001: ITS IMPACT ON THE PRACTICE OF MEDICINE' => 'Reflections',
                'Regulatory Issues: EMA' => 'Regulatory Issues',
                'Regulatory Issues: FDA' => 'Regulatory Issues',
                'Symptom Management' => 'Symptom Management and Supportive Care',
              );
              
              $section = (array_key_exists($section, $replace_with))? $replace_with[$section] : $section;
              
              $tids = array();

              // taxonomy
              if($tid = _intstrux_highwire_taxonomy($section, 'sections')) {
                 $tids[]['tid'] = $tid;
              }

              if($html && (strpos($html, 'CME') !== false)) {
                // CME taxonomy
                if($tid = _intstrux_highwire_taxonomy('CME', 'sections')) {
                   $tids[]['tid'] = $tid;
                }
              }
              
              if($tids) {
                $node->field_tax_section[$node->language] = $tids;
              }
            }
            
            // set article author and contributors
            if($authors = intstrux_highwire_parse_authors($entry)) {

              // authors text field
              $node->field_authors[$node->language][0]['value'] = implode(' ', $authors);

              // taxonomy
              foreach($authors as $delta => $author) {
                if($tid = _intstrux_highwire_taxonomy($author, 'authors')) {
                  $node->field_article_author[$node->language][$delta]['tid'] = $tid;
                }  
              }
            }
            
            // set article published date
            if($published = intstrux_highwire_parse_published($entry)) {
              $node->field_article_published_date[$node->language][0]['value'] = $published;    
            }
            
            // set article updated date
            if($updated = intstrux_highwire_parse_updated($entry)) {
              $node->field_article_updated_date[$node->language][0]['value'] = $updated;  
            }
            
            // set article edited date
            if($edited = intstrux_highwire_parse_edited($entry)) {
              $node->field_article_edited_date[$node->language][0]['value'] = $edited;  
            }
            
            if($type == 'article') {
              
              // set country editions
              $tids = array();
              
              if($tid = _intstrux_highwire_taxonomy('EU', 'editions')) {
                $tids[]['tid'] = $tid;
              }

              if($tid = _intstrux_highwire_taxonomy('US', 'editions')) {
                $tids[]['tid'] = $tid;
              }
              
              if($tids) {
                $node->field_tax_edition[$node->language] = $tids;
              }
              
              // set domain 
              if(TRUE) {
                $field_collection_item = entity_create('field_collection_item', array('field_name' => 'field_collection_multisite'));
                $field_collection_item->setHostEntity('node', $node);
                $field_collection_item->field_multisite_filter[$node->language][0]['value'] = 'oncologisthd.ampserver.intstrux.com';
                $field_collection_item->save();
              }
              
            } // end if($type == 'article')
            
            // set abstract
            if($abs_html = intstrux_highwire_article_content_load_by_entry($entry, 'abstract')) {
              $dom = new DOMDocument();
              $dom->loadXML($abs_html);
              $xpath = new DOMXPath($dom);
              
              // set title as HTML for both Article amd Express content types
              
              // find  elements with id article-title-1
              $title_html = $xpath->query('//*[contains(@id, "article-title-1")]');
              
              // set title HTML field
              if($title_html->length) {
                $title_html_node = $title_html->item(0);
                $title_inner_html = $title_html_node->ownerDocument->saveHTML($title_html_node);
                $title_html_content = intstrux_highwire_parse_content('h1', 'id', 'article-title-1', $title_inner_html);
                $node->field_article_title_html[$node->language][0] = array('value' => $title_html_content, 'format' => '2');  //2 = Full HTML
              }
              
              
              // set abstract
              
              $abstract_html = '';
              
              $abstract_remove = array();

              // find  elements under element with class abstract
              $abstracts = $xpath->query('//*[contains(@class,"abstract")]');

              if($abstracts->length) {
                foreach($abstracts as $abstract) {
                  $h2Tags = $abstract->getElementsByTagName('h2');

                  if($h2Tags->length && strtolower($h2Tags->item(0)->nodeValue) == 'abstract') {
                    foreach($abstract->childNodes as $child) {
                      if($child->nodeName != 'h2') {
                        $abstract_html .= $child->ownerDocument->saveXML( $child );  
                      }  
                    }
                  }
                }  
              }
              
              // set abstract field
              if($abstract_html) {
                $node->field_abstract[$node->language][0] = array('value' => $abstract_html, 'format' => '2');  //2 = Full HTML  
              }
              
              // set authors and affiliations

              // find  elements with class contributor-list
              $contributors = $xpath->query('//*[contains(@class, "contributor-list")]');
              
              // set authors with affiliate reference
              if($contributors->length) {
                $authors_node = $contributors->item(0);
                $node->field_authors[$node->language][0] = array('value' => $authors_node->ownerDocument->saveHTML($authors_node), 'format' => '2');  //2 = Full HTML
              }
              
              // find  elements with class affiliation-list
              $affiliations = $xpath->query('//*[contains(@class, "affiliation-list")]');
              
              // set affiliations 
              if($affiliations->length) {
                $affiliations_node = $affiliations->item(0);
                $node->field_article_affiliations[$node->language][0] = array('value' => $affiliations_node->ownerDocument->saveHTML($affiliations_node), 'format' => '2');  //2 = Full HTML 
              }
              
              // find elements with class correspondence-list
              $correspondence = $xpath->query('//*[contains(@class, "corresp-list")]');
              
              // set correspondence 
              if($correspondence->length) {
                $corresp_node = $correspondence->item(0);
                $node->field_article_correspondence[$node->language][0] = array('value' => $corresp_node->ownerDocument->saveHTML($corresp_node), 'format' => '2');  //2 = Full HTML 
              }

              // find elements with class history-list
              $history = $xpath->query('//*[contains(@class, "history-list")]');
              
              // set history 
              if($history->length) {
                $history_node = $history->item(0);
                $node->field_article_history[$node->language][0] = array('value' => $history_node->ownerDocument->saveHTML($history_node), 'format' => '2');  //2 = Full HTML 
              }
            }

            // set images and body fields
            if($html) {

              $embeddedimages = array();

              $dom = new DOMDocument();
              $dom->loadXML($html);
              $xpath = new DOMXPath($dom);

              //**************************************************************************
              //Adding/Updating the keywords taxonomy and attaching the terms to the node
              $entries = $xpath->query('//li[contains(@class,"kwd")]');

              drush_print("Keyword Length: {$entries->length}\n ");

              //RESET
              $node->field_keywords[$node->language] = array();

              $vocabulary_machine_name = "keywords";
              $tax = taxonomy_vocabulary_machine_name_load($vocabulary_machine_name);
              $vid = $tax->vid;

              for($i=0; $i < $entries->length; $i++){
                
                $keyword = $entries->item($i)->nodeValue;

                $terms = taxonomy_get_term_by_name($keyword, $vocabulary_machine_name);
                if (!empty($terms)) {
                  // term already exists
                  $tid = key($terms);
                } else {
                  // add term and get the tid
                  $term = new stdClass();
                  $term->name = $keyword;
                  $term->vid = $vid;

                  $status = taxonomy_term_save($term);
                  $tid = $term->tid;
                }
                
                $node->field_keywords[$node->language][$i]['tid'] = $tid;

                drush_print("Keyword: {$keyword}  TID: {$tid}");

              }
              //END OF: Adding/Updating the keywords taxonomy and attaching the terms to the node
              //**************************************************************************
              

               //NEW RAW IMPORT PART
              /****************************************************************/
              
                $nfigures = array();

                // find all elements with fig-inline 
                $figures = $xpath->query('//*[contains(@class, "fig-inline")]');

                foreach($figures as $figure) {

                  drush_print(t('--> Figure?'));

                  if($figure->hasChildNodes()) {
                    $figure->removeChild($figure->childNodes->item(0));  
                  }

                  $figure_id = $figure->parentNode->getAttribute('id');

                  if($ffile = _intstrux_highwire_image($entry, $figure_id, 'atom', $figure, $nfigures)) {
                    $embeddedimages[] = $ffile;
                    drush_print(t('--> Figure!'));
                  }
                }
                
                /****************************************************************/
                
                $ntables = array();

                $tables = $xpath->query('//*[contains(@class, "table-inline")]');

                foreach($tables as $table) {

                  drush_print(t('--> table?'));

                  if($table->hasChildNodes()) {
                    $table->removeChild($table->childNodes->item(0));  
                  }

                  $table_id = $table->parentNode->getAttribute('id');

                  if($tfile = _intstrux_highwire_image($entry, $table_id, 'atom', $table, $ntables)) {
                    $embeddedimages[] = $tfile;
                    drush_print(t('--> table!'));
                  }
                }
                
                /****************************************************************/
                
                $ngraphics = array();

                $graphics = $xpath->query('//*[contains(@class, "graphic-inline")]');

                foreach($graphics as $graphic) {


                  drush_print(t('--> graphic?'));

                  if($graphic->hasChildNodes()) {
                    $graphic->removeChild($graphic->childNodes->item(0));  
                  }

                  $graphic_id = $graphic->parentNode->getAttribute('id');

                  if($gfile = _intstrux_highwire_image($entry, $graphic_id, 'gif', $graphic, $ngraphics)) {
                    $embeddedimages[] = $gfile;

                    drush_print(t('--> Graphic!'));
                  }
                }
                
                /****************************************************************/
                
                if($embeddedimages) {
                   drush_print(t('--> FOUND NEW FILES'));
                  $node->field_embeddedimage[$node->language] = $embeddedimages; 
                }
              

                drush_print(t('--> NEW $node->field_embeddedimage: '.print_r($node->field_embeddedimage, true)));

                 // remove blank lines
                $new_html = preg_replace("/(^[\r\n]*|[\r\n]+)[\s\t]*[\r\n]+/", '', $html);  

                //$node->field_article_body[$node->language][0] = array('value' => $new_html, 'format' => '2');  //2 = Full HTML 
                //-- The raw entry 1:1 ------------------
                $node->field_article_raw[$node->language][0] = array('value' => $new_html, 'format' => '2');




                
                foreach($nfigures as $fid => $figure) {
                  if($file = file_load($fid)) {
                    // append figure image to html dom 
                    $imgElement = $dom->createElement('img');
                    $imgElement->setAttribute('class', 'large');
                    $imgElement->setAttribute('alt', 'Figure');
                    $imgElement->setAttribute('src', _intstrux_highwire_uri_path($file->uri));                    
                    $figure->appendChild($imgElement);
                  }          
                }
                
                /**********************************/
                
                foreach($ntables as $fid => $table) {
                  if($file = file_load($fid)) {  
                    // append table image to html dom
                    $imgElement = $dom->createElement('img');
                    $imgElement->setAttribute('class', 'large');
                    $imgElement->setAttribute('alt', 'Table');
                    $imgElement->setAttribute('src', _intstrux_highwire_uri_path($file->uri));  
                    //$imgElement->setAttribute('style', 'width: 50%;');
                    $table->appendChild($imgElement);  
                  }
                }
                
                /**********************************/
                
                foreach($ngraphics as $fid => $graphic) {
                  if($file = file_load($fid)) {  
                    // append graphic image to html dom
                    $imgElement = $dom->createElement('img');
                    $imgElement->setAttribute('class', 'graphic');
                    $imgElement->setAttribute('alt', 'Graphic');
                    $imgElement->setAttribute('src', _intstrux_highwire_uri_path($file->uri));  
                    $graphic->appendChild($imgElement);  
                  }
                }
                
                /**********************************/

                


                /**********************************/
                //Removing Learning objectives
                $h2s = @$dom->getElementsByTagName('h2');
                foreach ($h2s as $h2){
                  
                  //Unfortunately the learning objectives don't use any distinctive ID or CLASS. We have to search by the title/value of the h2 tag
                  $value = strtolower(strip_tags($h2->nodeValue));
                  
                  if(strpos($value, "learning objectives") !== FALSE){
                    $h2->parentNode->parentNode->removeChild($h2->parentNode);
                    $html  = @$dom->saveHTML();

                     drush_print(t('--> Removed learning objective'));
                  }
                }

                $new_html = $dom->saveHTML();

                  // remove blank lines
                $new_html = preg_replace("/(^[\r\n]*|[\r\n]+)[\s\t]*[\r\n]+/", '', $new_html);  

                //The filterd entry 1:1
                $node->field_article_full[$node->language][0] = array('value' => $new_html, 'format' => '2');  //2 = Full HTML 




                // set and remove title 
                $article_title = $xpath->query('//*[contains(@id,"article-title")]');

                if($article_title->length) {
                  
                  if(empty($node->field_article_title_html[$node->language][0]['value'])) {
                    $title_html_node = $article_title->item(0);
                    $title_inner_html = $title_html_node->ownerDocument->saveHTML($title_html_node);
                    $title_html_content = intstrux_highwire_parse_content('h1', 'id', 'article-title-1', $title_inner_html);
                    $node->field_article_title_html[$node->language][0] = array('value' => $title_html_content, 'format' => '2');  //2 = Full HTML 
                  }
   
                  $article_title->item(0)->parentNode->removeChild($article_title->item(0));  
                }
                
                // remove contributors
                $contributors = $xpath->query('//*[contains(@class,"contributors")]');

                if($contributors->length) {
                  $contributors->item(0)->parentNode->removeChild($contributors->item(0));   
                }
                
                // remove article high lights
                $kwd = $xpath->query('//*[contains(@class,"kwd-group")]');

                if($kwd->length) {
                  $kwd->item(0)->parentNode->removeChild($kwd->item(0));  
                }
                
                // find  elements under element with class abstract
                $abstracts = $xpath->query('//*[contains(@class,"abstract")]');

                if($abstracts->length) {
                  foreach($abstracts as $abstract) {
                    $h2Tags = $abstract->getElementsByTagName('h2');

                    if($h2Tags->length && strtolower($h2Tags->item(0)->nodeValue) == 'abstract') {
                      // remove abstract
                      $abstract->parentNode->removeChild($abstract);
                    }
                  }  
                }
              
                if($new_html = $dom->saveHTML()) {

                  // remove blank lines
                  $new_html = preg_replace("/(^[\r\n]*|[\r\n]+)[\s\t]*[\r\n]+/", '', $new_html);  

                  $node->field_article_body[$node->language][0] = array('value' => $new_html, 'format' => '2');  //2 = Full HTML 

                }
              } // end if(isset($html))

              // save node
              if ($node = node_submit($node) ) {
              
                node_save($node);
                drush_print(t('--> Submitted node '.$node->nid));
              }
            
            
              
              // create an indicator 
              db_insert('highwire_migrate')
                  ->fields(array(
                    'nid' => $node->nid, 
                    'atom_id' => intstrux_highwire_parse_id($entry),
                    'type' => $node->type,
                    ))->execute();

              $message = t('Inserted Current Node: @nid | Title: @title | Type: @type', array(
                '@nid' => $node->nid,
                '@title' => $title,
                '@type' => $node->type
              )); 

              watchdog('intstrux_highwire_import', $message);
              
              
            
          } // end if($atom_id) else 
          
        } // end foreach($result)
        
      } else { // end if($result)
        $finished = true;  
      }
      
      if ($progress == $totalResults) {
        $finished = true;
      }
      
    } // end while(!$finished)
  } // end if($published)
}